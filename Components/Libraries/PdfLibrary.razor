
@using BlazorPro.Spinkit
@using System.ComponentModel.DataAnnotations
@using System.Reflection;
@using System.ComponentModel;
@using judo_univ_rennes.Static
@using static System.ComponentModel.DataAnnotations.DisplayAttribute
@using judo_univ_rennes.Data


<MudTable  Items="@PdfModels" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<PdfModel,bool>(FilterFunc1)"
          @bind-SelectedItem="selectedItem"
          CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => UpdatePdf(selectedItem))"
          RowEditPreview="BackupItem"
          RowEditCancel="ResetItemToOriginalValues"
          CanCancelEdit="true"
          RowEditCommit="ItemHasBeenCommitted" EditTrigger="@editTrigger">
    @*<ColGroup></ColGroup>*@
    <ToolBarContent>
        <MudText Typo="Typo.h6">Fichiers PDF</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchStringInit" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent class="judo-ternary">
        <MudTh Class="judo-ternary">N° (@PdfModels.Count)</MudTh>

        <MudTh Class="judo-ternary"> Nom</MudTh>
        <MudTh Class="judo-ternary"> Date MAJ</MudTh>
        <MudTh Class="judo-ternary">Catégorie</MudTh>

        <MudTh Class="judo-ternary">Option</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd>@(PdfModels.IndexOf(context)+1)</MudTd>
        <MudTd DataLabel="Filename">@context.FileName</MudTd>
        <MudTd DataLabel="MAJ">@context.DateOfUpdate</MudTd>
        <MudTd DataLabel="Category">@context.Category</MudTd>
        <MudTd DataLabel="Option">
                <MudGrid>
                    <MudItem xs="6" sm="3" lg="6">
                       @* <AuthorizeView Roles="Admin">
                            <Authorized Context="AllowDelete">
                                <MudIconButton Class="d-inline-flex" OnClick="e=>DeleteFile(context.FileName)" Size="Size.Small" Color="Color.Error" Disabled=@loading Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" aria-label="delete"></MudIconButton>
                            </Authorized>
                        </AuthorizeView>*@
                        <MudIconButton Class="d-inline-flex" OnClick="e=>DeleteFile(context.FileName)" Size="Size.Small" Color="Color.Error" Disabled=@loading Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" aria-label="delete"></MudIconButton>
                    </MudItem>
                    <MudItem xs="6" sm="3" lg="6">
                        <MudIconButton OnClick="e=>ShowFile(context.FileName)" Size="Size.Small" Class="d-inline-flex judo-primary" Icon="@Icons.Material.Filled.ArrowUpward" Variant="Variant.Filled" aria-label="arrowOutward"></MudIconButton>
                    </MudItem>
                </MudGrid>

           
        </MudTd>
    </RowTemplate>
    
    <RowEditingTemplate>

        <MudTd DataLabel="Ref">
            @*<MudTextField @bind-Value="selectedItem.Id" Disabled />*@
            <MudTextField @bind-Value="@(PdfModels.IndexOf(context)+1)" Disabled />
        </MudTd>
        <MudTd DataLabel="Nom">
            <MudTextField @bind-Value="@context.FileName" Required />
        </MudTd>
        <MudTd DataLabel="MAJ">
            <MudTextField @bind-Value="@context.DateOfUpdate" Disabled />
        </MudTd>
        <MudTd DataLabel="Category">
       
            <MudSelect @bind-Value="@context.Category"  Variant="Variant.Outlined">
                @foreach (PdfCategory name in Enum.GetValues(typeof(PdfCategory)))
                {
                    <MudSelectItem Value="@( EnumExtensions.StringValueOfEnum(name))" />
                }
            </MudSelect>
        </MudTd>

    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
@*    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>*@
    <PagerContent>
        @if (loading == true)
        {
            <Bounce></Bounce>
        }
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {

    private string searchStringInit = "";


    public static string StringValueOfEnum(Enum value)
    {
        FieldInfo fi = value.GetType().GetField(value.ToString());
        DescriptionAttribute[] attributes = (DescriptionAttribute[])fi.GetCustomAttributes(typeof(DescriptionAttribute), false);
        if (attributes.Length > 0)
        {
            return attributes[0].Description;
        }
        else
        {
            return value.ToString();
        }
    }

    private bool FilterFunc1(PdfModel element) => FilterFunc(element, searchStringInit);

    private bool FilterFunc(PdfModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.FileName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}