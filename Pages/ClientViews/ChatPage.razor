@page "/chatpage"
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Real-time chat</PageTitle>


<MudGrid Style="height: 90%; ">

    <MudItem xs="12" lg="12" >


        <div id="Realtime_Chat" class="ma-0" style="height:45vh;overflow: auto;">
            <MudGrid Style=" height:50vh; width:100%" Class="d-flex align-content-start " id="eleScroll">

                @foreach (var message in messages)
                {


                    <MudItem xs="12" lg="12" >

                        @if (message.SenderName == userInput)
                        {

                            <MudCard Class="flex-row-reverse bubble right">
                                <MudCardHeader Style="display: -webkit-box;direction: rtl;">
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.caption">
                                            @message.SenderName | @message.SentAt.ToLocalTime()
                                        </MudText>
                                    </CardHeaderContent>
                                    <CardHeaderAvatar>
                                        <MudAvatar Color="Color.Secondary" Square="true">@(message.SenderName.Substring(0, 1))</MudAvatar>
                                    </CardHeaderAvatar>

                                </MudCardHeader>

                                <MudCardContent Class="rtl d-flex">
                                    <MudText Typo="Typo.body1">
                                        @message.Text
                                    </MudText>
                                </MudCardContent>

                            </MudCard>



                        }
                        else
                        {
                            <MudCard Class="flex-row bubble left">
                                <MudCardHeader Class="ltr" Style="display: -webkit-box">
                                    <CardHeaderAvatar>
                                        <MudAvatar Color="Color.Success" >@(message.SenderName.Substring(0, 1))</MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.caption" Class="d-flex align-content-end">
                                            @message.SenderName | @message.SentAt.ToLocalTime()
                                        </MudText>
                                    </CardHeaderContent>

                                </MudCardHeader>

                                <MudCardContent>
                                    <MudText Typo="Typo.body1">
                                        @message.Text
                                    </MudText>
                                </MudCardContent>

                            </MudCard>
                        }
                    </MudItem>
                }

            </MudGrid>
            <MudScrollToTop TopOffset="100" Selector="#Realtime_Chat" Style="z-index:2001;">
                <div class="mud-theme-secondary px-3 py-6 mud-elevation-16 rounded-xl fixed" style="bottom:20px;right:20px;">Top</div>
            </MudScrollToTop>
        </div>
    </MudItem>
    <MudItem xs="12" lg="12">
        <MudPaper Elevation="0" Class="d-flex flex-row justify-center py-6" style="height:35vh;overflow: auto;">

            <MudGrid>
                <MudItem xs="12" xl="8">
                    <MudTextField HelperText="Message" FullWidth="true" Lines="3" @bind-Value="@messageInput" Variant="Variant.Outlined" Margin="Margin.Dense" />

                </MudItem>
                <MudItem xs="12" md="4" lg="3">
                    <MudTextField @bind-Value="@userInput" ReadOnly />
                </MudItem>
                <MudItem xl="1" xs="3">

                    <MudBadge Content="@(onlineUsers.Count)" Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
                        <MudIconButton Icon="@Icons.Material.Filled.EmojiPeople" Color="Color.Default" OnClick="@(e => ToggleOverlay(true))" />
                    </MudBadge>

                </MudItem>

                @if (_started==false)
                {

                    <MudItem xl="1" xs="3">

                        <MudBadge  Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
                            <MudIconButton Icon="@Icons.Material.Filled.CastConnected" Color="Color.Success" OnClick="@(e =>Connect() )" />
                        </MudBadge>

                    </MudItem>
                }
                else
                {
                    <MudItem xl="1" xs="3">

                        <MudBadge  Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
                            <MudIconButton Icon="@Icons.Material.Filled.Discount" Color="Color.Error" OnClick="@(e => Disconnect())" />
                        </MudBadge>

                    </MudItem>
                }
                <MudItem xs="12" sm="2" md="2" xl="2">
                    <MudButton ButtonType="ButtonType.Button" Disabled="@(!IsConnected||String.IsNullOrWhiteSpace(messageInput))" @onclick=Send Variant="Variant.Filled" Color="Color.Info">Send</MudButton>

                </MudItem>
            </MudGrid>


            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
                <MudAvatarGroup Max="8" Spacing="3" MaxColor="Color.Warning">
                    @foreach (var u in onlineUsers)
                    {

                        <MudBadge Color="Color.Success" Overlap="true" Bordered="true">
                            <MudAvatar> @u.UserName.Substring(0, 2)</MudAvatar>
                        </MudBadge>
                    }
                    </MudAvatarGroup>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(e => ToggleOverlay(false))">Hide</MudButton>
            </MudOverlay>

    
               
          


        </MudPaper>
    </MudItem>



</MudGrid>


@*ref using sample code*@

@*@foreach (var id in identifiers)
{
        
    <button id="@id" @ref="myComponents[id]" @onclick="onclick">@id</button>
}

@code {
    private List<string> identifiers = new List<string> { "1", "2", "3" };
    private Dictionary<string, ElementReference> myComponents = new Dictionary<string, ElementReference>();
    private void onclick(MouseEventArgs args)
    {
        var d = myComponents;
        var a = args;
    }
}*@





